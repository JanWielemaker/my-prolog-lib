%   File   : UTIL.HLP
%   Author : Dave Robertson
%   Updated: 30 Sept 85
%   Purpose: Maintain an up-to-date list of predicates in QUTIL.BIN
%   Comments: To find out what the differences are between the utilities
%	      which were available on the DEC10 and those currently
%	      available in quintus, compare this file to DEC10UTIL.HLP
%	      and look in CHANGES.TXT.


Item1 \= Item2						%negation
add_element(Element, Set, Set+Element)			%sets
add_to_heap(Heap, Key, Item, NewHeap)			%heaps
advise(Predicate, Port, Action)				%UTIL:ADVICE.PL
advised(Predicate)					%UTIL:ADVICE.PL
and_to_list(Conjunction, List)				%flatten
append(List1, List2, List1List2)			%basics
apply(Predicate, Arguments)				%call
array_length(Array+Updates, Length)			%UTIL:ARRAYS.PL
array_to_list(Array+Updates, List)			%longarr
ask(Question, Answer)					%ask
ask(Question, Default, Answer)				%ask
ask_default_character(Specification, Character)		%ask
assoc_to_list(Association, List)			%assoc

bag_inter(Bag1, Bag2, Intersection)			%bags (bag_intersect/3)
bag_of(Template, Generator, Bag)			%system predicate
bag_to_list(Bag, List)					%bags
bag_to_set(Bag, Set_List)				%bags
bag_union(Bag1, Bag2, Union)				%bags
bagmax(Bag, Most_Frequent_Element)			%bags (bag_max/2)
bagmin(Bag, Least_Frequent_Element)			%bags (bag_min/2)
binary_to_list(Tree, Operator, Before, After)		%flatten
binary_to_list(Tree, Operator, Unit, Before, After)	%flatten

callable(Form)						%types
case_shift(MixedCases, LowerCase)			%read_sent
cgensym(Prefix, NewAtom)				%strings
chars_to_words(Characters, Words)			%read_sent
checkand(Predicate, Conjunction)			%mapand
checkbag(Predicate, Bag)				%bags
checklist(Predicate, List)				%maplist
close(File, OldFile)					%UTIL:FILES.PL
compound(Term)						%types
concat(Const1, Const2, Const1Const2)			%strings
contains(Term, Expression)			%contains (contains_term)
convlist(Rewrite, List, NewList)			%maplist
copy(Old, New)						%UTIL:METUTL.PL
copy_ground(Term, Copy, Substitution)			%UTIL:STRUCT.PL
correspond(Element1, List1, List2, Element2)		%lists
count							%UTIL:COUNT.PL

del_element(Element, Set, Set_-_Element)		%sets
delete(List, Element, List_-_Element)			%lists
delete(OpenFile)					%unix (delete_file)
disjoint(Set)						%UTIL:SETUTL.PL
disjoint(Set1, Set2)					%sets

empty_queue(Queue)					%queues
exclude(Predicate, List, SubList)			%maplist
expand(File, NewFile)					%UTIL:EXPAND.PL

fetch(Index, Array, History)				%UTIL:ARRAYS.PL
file_exists(File)					%unix
findall(Template, Generator, List)			%findall
findall(Template, Generator, SoFar, List)		%findall
flag(Flag, InitialValue)				%UTIL:FLAGRO.PL
flag(Flag, Value, NewValue)				%UTIL:FLAGRO.PL
flatten(List, Flat)					%flatten
forall(Generator, Test)					%foreach
freeof(Term, Expression)			%contains (free_of_term)
fwritef(File, Format)					%UTIL:WRITEF.PL
fwritef(File, Format, List)				%UTIL:WRITEF.PL

gen_assoc(Association, Key, Value)			%assoc
gensym(Prefix, Symbol)					%strings
get_assoc(Key, Association , Value)			%assoc
get_from_heap(Heap, Key, Item, NewHeap)			%heaps
get_label(Index, Tree, Label)				%UTIL:TREES.PL
give_help						%UTIL:HELPER.PL
give_help(Area)						%UTIL:HELPER.PL
give_help(Area, Topic)					%UTIL:HELPER.PL
ground(Term)						%types
head_queue(Queue, Head)					%queues
heap_size(Heap, Number_of_Elements_in_Heap)		%heaps
heap_to_list(Heap, List)				%heaps
intersect(Set1, Set2)					%sets
intersect(Set1, Set2, Intersection)			%sets
is_bag(Bag)						%bags
is_digit(Char_Digit)					%ctypes
is_endfile(Char_^Z)					%ctypes
is_layout(Char_Tab_NewLine_^S_etc)			%UTIL:RDSENT.PL
is_letter(Char_LowerCase+UpperCase)			%UTIL:RDSENT.PL
is_lower(Char_LowerCase)				%ctypes
is_newline(Char_NewLine)				%ctypes
is_paren(Left_'([{<', Right_'>}]) ')			%ctypes
is_period(Char_'.?!')					%ctypes
is_punct(Char_',;:')					%ctypes
is_upper(Char_UpperCase)				%ctypes

join_queue(Element, Queue, NewQueue)			%queues
jump_queue(Element, Queue, NewQueue)			%queues

keys_and_values(PairList, KeyList, ValList)		%project

last(LastElement, List)					%lists
length(Bag, Total_Number_of_Elts, Number_of_Distinct_Elts)%bags
length_queue(Queue, Number_of_Elements_in_Queue)	%queues
lib(File)						%UTIL:LIB2.PL
lib(File, Found)					%UTIL:LIB2.PL
list_join_queue(List, Queue, NewQueue)			%queues
list_jump_queue(List, Queue, NewQueue)			%queues
list_to_and(List, Conjunction)				%flatten
list_to_array(List, Array)				%UTIL:ARRAYS.PL
list_to_assoc(List, Association)			%assoc
list_to_bag(List, Bag)					%bags
list_to_binary(List, Operator, Tree)			%flatten
list_to_binary(List, Operator, Unit, Tree)		%flatten
list_to_heap(List, Heap)				%heaps
list_to_or(List, Disjunction)				%flatten
list_to_ord_set(List, OrderedSet)			%ordsets
list_to_plus(List, Sum)					%flatten
list_to_queue(List, Queue)				%queues
list_to_times(List, Product)				%flatten
list_to_tree(List, Tree)				%UTIL:TREES.PL
listtoset(List, Set)					%sets (list_to_set)

make_queue(Queue)					%queues
make_sub_bag(Bag, SubBag)				%bags
map_assoc(Predicate, Association, Association)		%assoc
map_tree(Predicate, Tree, NewTree)			%UTIL:TREES.PL
mapand(Rewrite, Conjunction, NewConjunction)		%mapand
mapbag(Predicate, Bag, NewBag)				%bags
maplist(Predicate, List, NewList)			%maplist
medic(File)						%UTIL:MEDIC.PL
member(Element, Multiplicity, Bag)			%bags
member(Element, Set)					%basics
memberchk(Element, Set)					%basics
merge(List1, List2, MergedList)				%samsort
min_of_heap(Heap, SmallestKey, Item)			%heaps
min_of_heap(Heap, SmallestKey1, Item1, NextSmallestKey2, Item2)%heaps

nextto(Element_K, Element_K+1, List)			%lists
nmember(Element_K, List, K)				%lists
not(Goal)						%negation
note_lib(File)						%UTIL:LIB2.PL
note_lib(File, Reconsult_or_Compile)			%UTIL:LIB2.PL
numlist(LowInteger, HighInteger, List_of_Integers)	%lists

occ(Subterm, Term, Number_of_Occurrences)	%contains (contains_term)
occurs_check(Term, Variable)				%UTIL:METUTL.PL
occurs_in(Variable, Term)				%UTIL:METUTL.PL
once(Goal)						%negation
open(File)						%UTIL:FILES.PL
open(OldFile, File)					%UTIL:FILES.PL
or_to_list(Disjunction, List)				%flatten
ord_disjoint(Set1, Set2)				%ordsets
ord_insert(Set1, Elem,  Set2)				%UTIL:ORDSET.PL
ord_intersect(Set1, Set2)				%ordsets
ord_intersect(Set1, Set2, Intersection)			%ordsets
ord_seteq(Set1, Set2)					%ordsets
ord_subset(SubSet, Set)					%ordsets
ord_subtract(Set1, Set2, Set1-Set2)			%ordsets
ord_symdiff(Set1, Set2, Set1-Set2_+_Set2-Set1)		%ordsets
ord_union(Set1, Set2, Union)				%ordsets

p_to_s_graph(P_Graph, S_Graph)				%UTIL:GRAPHS.PL
pairfrom(Set, Element1, Element2, Residue)		%sets
patharg(Path, Expression, Term)				%arg (path_arg)
perm(List, PermutedList)				%lists
perm2(Item1, Item2, Item1_or_2, Item2_or_1)		%lists
plus(Integer1, Integer2, Integer1+Integer2)		%long
plus_to_list(Sum, List)					%flatten
portray_bag(Bag)					%bags
position(Term, Expression, Path)			%UTIL:OCCUR.PL
prconj(Conjunction)					%UTIL:WRITEF.PL
prexpr(Expression)					%UTIL:WRITEF.PL
prlist(List)						%UTIL:WRITEF.PL
project(Structures, K, List_of_Kth_Arguments)		%project
put_assoc(Key, Association, New)			%assoc (put_assoc/4)
put_label(Index, Tree, Label, NewTree)			%UTIL:TREES.PL

queue_to_list(Queue, List)				%queues

read_in(Words)						%read_in
read_line(Characters)					%read_sent
read_sent(Words)					%read_sent
read_tokens(TokenList, VariableList)			%UTIL:RDTOK.PL
read_until(Delimiters, Answer)				%read_sent
remove_dups(List, PrunedList)				%lists
replace(Path, Expression, SubTerm, NewExpression)	%UTIL:OCCUR.PL
reverse(List, ReversedList)				%lists

s_to_p_graph(S_Graph, P_Graph)				%UTIL:GRAPHS.PL
s_to_p_trans(S_Graph, Transposed_P_Graph)		%UTIL:GRAPHS.PL
select(Element, Set, Residue)				%sets
serve_queue(Queue, Head, NewQueue)			%queues
set_of(Template, Generator, Set)			%setof
seteq(Set1, Set2)					%sets
sick(Functor, Arity)					%UTIL:MEDIC.PL
simple(Term)						%types
some(Predicate, List)					%maplist
somechk(Predicate, List)				%maplist
store(Index, Array+Updates, Element, NewArray+NewUpdates)%UTIL:ARRAYS.PL
sublist(Predicate, List, SubList)			%maplist
subseq(Set, SubSSet, Complement)			%lists
subseq0(Sequence, SubSequence)				%lists
subseq1(Sequence, ProperSubSequence)			%lists
subset(Subset, Set)					%sets
subst(Substitution, Term, Result)			%UTIL:STRUCT.PL
subsumes(General, Specific)				%subsumes
subsumes_chk(General, Specific)				%subsumes
subterm(SubTerm, Term)					%UTIL:METUTL.PL
subtract(Set1, Set2, Set1-Set2)				%sets
succ(Predecessor, Successor)				%long
sumlist(List_of_Integers, Sum_of_Integers)		%lists
symdiff(Set1, Set2, Set1-Set2_+_Set2-Set1)		%sets

talk_to_user_while(Goal)				%UTIL:ASK.PL
test_sub_bag(SubBag, Bag)				%bags
tidy(MessyExpression, TidyExpression)			%UTIL:TIDY.PL
tidy_withvars(MessyExpression, TidyExpression)		%UTIL:TIDY.PL
times_to_list(Product, List)				%UTIL:flatten
transpose(S_Graph, Transposed_S_Graph)			%UTIL:GRAPHS.PL
tree_size(Tree, Number_Elements_in_Tree)		%UTIL:TREES.PL
tree_to_list(Tree, List)				%UTIL:TREES.PL
trim_blanks(RawInput, Cleaned)				%UTIL:read_sent
try_hard_to_see(Title, DeviceDflts, ExtensionDflts)	%UTIL:TRYSEE.PL
try_hard_to_see(Title, DeviceDflts, ExtensionDflts, FileFound)%UTIL:TRYSEE.PL
ttyprint(Term)						%UTIL:WRITEF.PL
ty(FileList)						%UTIL:TYPE.PL
type(FileList)						%UTIL:TYPE.PL

unadvise(Predicate, Port)				%UTIL:ADVICE.PL
unify(Var1, Var2)					%unify
union(Set1, Set2, Union)				%sets
update(Template, Generator)				%update

var_member_chk(Variable, List)				%UTIL:METUTL.PL
variables(Term, VariableList)				%UTIL:STRUCT.PL
variables_of(Term, Variables)				%UTIL:METUTL.PL
variant(Term1, Term2)					%subsumes
vcheck							%UTIL:VCHECK.PL
vcheck(File)						%UTIL:VCHECK.PL

warshall(S_Graph, TransitiveClosure)			%UTIL:GRAPHS.PL
well(Functor, Arity)					%UTIL:MEDIC.PL
writef(Format)						%UTIL:WRITEF.PL
writef(Format, Item)					%UTIL:WRITEF.PL

yesno(Question)						%ask
yesno(Question, Default)				%ask

